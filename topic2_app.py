import streamlit as st
import pandas as pd
import numpy as np
import random
import re
import regex
import time
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from PIL import Image
import warnings
warnings.filterwarnings('ignore')
from sklearn.naive_bayes import MultinomialNB
from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer
from underthesea import word_tokenize, sent_tokenize, pos_tag
from sklearn.pipeline import Pipeline
import pickle
from sklearn.preprocessing import LabelEncoder, OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import linear_kernel, cosine_similarity

from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS
from deep_translator import GoogleTranslator
# from gensim import corpora, models, similarities
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.model_selection import train_test_split  
from sklearn. metrics import classification_report
from sklearn.metrics import roc_curve, auc, roc_auc_score
from sklearn.metrics import accuracy_score, confusion_matrix, f1_score, recall_score, precision_score

import scipy
import mylibs as ml
# # ƒê·ªåC FILE
# @st.cache_data
# def load_df_company(file):
#     return pd.read_excel(file, engine="openpyxl",index_col='id')

# @st.cache_data
# def load_df_reviews(file):
#     return pd.read_excel(file, engine="openpyxl",index_col='id')

# df_Company = load_df_company('Overview_Companies.xlsx')
# df_Reviews = load_df_reviews('Reviews.xlsx')

# data = df_Reviews.merge(df_Company, on='Company Name', how='left')
# data.columns = data.columns.str.replace("‚Äô","'")


# C·∫•u h√¨nh trang
st.set_page_config(layout="wide")
# CSS ƒë·ªÉ ƒë·∫©y footer xu·ªëng ƒë√°y sidebar
st.markdown("""
    <style>
    /* TƒÉng chi·ªÅu cao sidebar v√† ƒë·∫©y footer xu·ªëng ƒë√°y */
    [data-testid="stSidebar"] > div:first-child {
        display: flex;
        flex-direction: column;
        height: 100vh; /* full chi·ªÅu cao tr√¨nh duy·ªát */
    }

    .sidebar-footer {
        margin-top: auto;
        font-size: 12px;
        color: gray;
        padding-top : 50px;
        line-height: 1.5;
    }
    </style>
""", unsafe_allow_html=True)

# Sidebar (menu b√™n tr√°i)
# Kh·ªüi t·∫°o tr·∫°ng th√°i n·∫øu ch∆∞a c√≥
if "selected_button" not in st.session_state:
    st.session_state.selected_button = "1"  # m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã n·ªôi dung 1

# Sidebar: C√°c n√∫t
with st.sidebar:
    st.title("üìÇ Menu")

    if st.button("Overview"):
        st.session_state.selected_button = "1"
    if st.button("Content-Based"):
        st.session_state.selected_button = "2"
    if st.button("Recommender System"):
        st.session_state.selected_button = "3"
    if st.button("New Prediction"):
        st.session_state.selected_button = "4"
    # Footer n·∫±m ·ªü ƒë√°y sidebar
    st.markdown("""
        <div class='sidebar-footer'>
            <hr style="margin-top: 10px; margin-bottom: 5px;">
            C√°c th√†nh vi√™n th·ª±c hi·ªán</br><br>
            üë§1. Ph·∫°m Nh·∫≠t Minh<br>
            üìß <a href="mailto:mphamm12@gmail.com">mphamm12@gmail.com</a><br><br>
            üë§2. V√µ Qu·ªëc H√πng<br>
            üìß <a href="mailto:hung232803@gmail.com">hung232803@gmail.com</a>      
        
        </div>
    """, unsafe_allow_html=True)
    
# T·∫°o 2 c·ªôt
col1, col2 = st.columns([4, 1])  # t·ª∑ l·ªá 5:1 cho n·ªôi dung v√† logo

with col1:
    st.markdown("""
        <h1 style='text-align: center; color: #2c3e50;'>
            ƒê·ªí √ÅN T·ªêT NGHI·ªÜP DATA SCIENCE - MACHINE LEARNING - K304
        </h1>
        <h3 style='text-align: center; color: #2c3e50;'>
            Gi√°o vi√™n h∆∞·ªõng d·∫´n: Khu·∫•t Th·ª•y Ph∆∞∆°ng
        </h3>

    """, unsafe_allow_html=True)

with col2:
    st.image("logo_nhom.png",width=200)

# ƒê∆∞·ªùng k·∫ª ngƒÉn c√°ch
st.markdown("---")

# Hi·ªÉn th·ªã n·ªôi dung theo m·ª•c ƒë√£ ch·ªçn
if st.session_state.selected_button == "1":
    ml.scroll_to_top()
    st.markdown("""
        <h3 style='text-align: center; color: #2c3e50;'>
            üìä C√≥ 2 ch·ªß ƒë·ªÅ trong kh√≥a h·ªçc:
        </h3>
    """, unsafe_allow_html=True)
    # T·∫°o 2 c·ªôt
    col1, col2 = st.columns([5, 5])  # t·ª∑ l·ªá 5:1 cho n·ªôi dung v√† logo
    with col1:
        st.markdown("""
        <h5 style='text-align: left; color: #2c3e50;'>
            Topic 1: Content-Based Filtering
        </h5>
    """, unsafe_allow_html=True)        
        st.image("Clustering_p1.png", width=300, caption="Sentiment Analysis & Clustering")
    with col2:
        st.markdown("""
        <h5 style='text-align: center; color: #2c3e50;'>
            Topic 2: Recommender System
        </h5>
    """, unsafe_allow_html=True)
        st.image("recommend.png", width=300, caption="Recommender System") 
        
#  CONTENTBASED
if st.session_state.selected_button == "2":
    ml.scroll_to_top()
    st.subheader("üìà Ph√¢n t√≠ch chi ti·∫øt")
  
    st.markdown("""
                # Gemsim
                    <a href="https://pypi.org/project/gensim">https://pypi.org/project/gensim </a>
                    -L√† m·ªôt th∆∞ vi·ªán Python chuy√™n x√°c ƒë·ªãnh s·ª± t∆∞∆°ng t·ª± v·ªÅ ng·ªØ nghƒ©a gi·ªØa hai t√†i li·ªáu th√¥ng qua m√¥ h√¨nh kh√¥ng gian vector v√† b·ªô c√¥ng c·ª• m√¥ h√¨nh h√≥a ch·ªß ƒë·ªÅ.
                    - C√≥ th·ªÉ x·ª≠ l√Ω kho d·ªØ li·ªáu vƒÉn b·∫£n l·ªõn v·ªõi s·ª± tr·ª£ gi√∫p c·ªßa vi·ªác truy·ªÅn d·ªØ li·ªáu hi·ªáu qu·∫£ v√† c√°c thu·∫≠t to√°n tƒÉng c∆∞·ªùng
                    - T·ªëc ƒë·ªô x·ª≠ l√Ω v√† t·ªëi ∆∞u h√≥a vi·ªác s·ª≠ d·ª•ng b·ªô nh·ªõ t·ªët
                    - Tuy nhi√™n, Gensim c√≥ √≠t t√πy ch·ªçn t√πy bi·∫øn cho c√°c function
                    #### Tham kh·∫£o:
                    Link <a href="https://www.tutorialspoint.com/gensim/index.htm">https://www.tutorialspoint.com/gensim/index.htm</a>
                    link <a href="https://www.machinelearningplus.com/nlp/gensim-tutorial">https://www.machinelearningplus.com/nlp/gensim-tutorial</a>
                """)

# RECOMMEND
if st.session_state.selected_button == "3":
    ml.scroll_to_top()
    st.subheader("ü§ñ T·∫°o Module d·ª± ƒëo√°n xem c√≥ Recommender hay l√† kh√¥ng?")
    st.subheader("I. Xem ngu·ªìn d·ªØ li·ªáu")
    # st.write(data['Company Name'].value_counts().head(5))
    st.subheader("II. Chart")
    
    # V·∫Ω bi·ªÉu ƒë·ªì ph√¢n b·ªë sl ng∆∞·ªùi
    st.markdown("<h4 style='margin-left: 20px;'>üîπQui m√¥ nh√¢n s·ª±</h4>", unsafe_allow_html=True) 
           
    st.image("img/df_nhansu.png")
    st.image('img/c1_nhansu.png')
    # # Load h√¨nh ·∫£nh t·ª´ file
    # image = Image.open("img/c1_nhansu.png")
    # resized_image = image.resize((300, 200))  # Resize width x height
    # # Hi·ªÉn th·ªã tr√™n Streamlit
    # st.image(resized_image, caption="Bi·ªÉu ƒë·ªì t·ª´ m√¥ h√¨nh", use_container_width=True)

    # Bi·ªÉu ƒë·ªì qu·ªëc gia:
    st.markdown("<h4 style='margin-left: 20px;'>üîπM·∫≠t ƒë·ªô ph√¢n b·ªë c√°c qu·ªëc gia</h4>", unsafe_allow_html=True)        
    
    st.image("img/df_quocgia.png")
    st.image("img/c2_quocgia.png")
    
    # Th·ªùi gian l√†m vi·ªác
    st.image("img/df_thoigian.png")
    st.image("img/c3_thoigian.png")

    # OT
    st.markdown("<h4 style='margin-left: 20px;'>üîπC√≥ OT kh√¥ng?</h4>", unsafe_allow_html=True)        

    st.image("img/df_ot.png")
    st.image("img/c4_ot.png")
    
    st.subheader("III. Built Model")

    # √Åp d·ª•ng style v√† hi·ªÉn th·ªã
    st.image("img/df_model_I.png")
    st.image("img/c5_model_tot.png")
    
    st.markdown("---")
    
    st.image("img/c6_confusion.png")

    st.image("img/c7_roc.png")
    
if st.session_state.selected_button == "4":
    ml.scroll_to_top()
    st.subheader("New Prediction")
    
    # df_companies = data
    # if 'random_companies' not in st.session_state:       
    #     st.session_state.random_companies = df_companies.sample(n=10, random_state=42)

    # if 'selected_id' not in st.session_state:
    #     st.session_state.selected_id = None
    # company_options = [(row['Company Name'], index) for index, row in st.session_state.random_companies.iterrows()]

    # selected_company = st.selectbox(
    #     "Ch·ªçn c√¥ng ty",
    #     options=company_options,
    #     format_func=lambda x: x[0]
    # )
    # # Display the selected company
    # st.write("""
    #     <svg width="24" height="24" fill="none" stroke="red" stroke-width="3" stroke-linecap="round" viewBox="0 0 24 24">
    #     <path d="M12 5v14M5 12h14"/>
    #     </svg> <span style="font-size:18px;">B·∫°n ƒë√£ ch·ªçn c√¥ng ty: </span>
    #     """, selected_company[0],unsafe_allow_html=True)    
    # st.write("üîë ID:", selected_company[1])
    # st.markdown(
    #     """
    #     <hr style="border-top: 1.5px dashed green; width: 100%;">
    #     """,
    #     unsafe_allow_html=True
    #     )
    # # C·∫≠p nh·∫≠t session_state d·ª±a tr√™n l·ª±a ch·ªçn hi·ªán t·∫°i
    # st.session_state.selected_id = selected_company[1]
    # # D√ôNG CHO C√ÅC SELECTION DROPDOWNS
    # selections = {}  # D√πng dict ƒë·ªÉ l∆∞u k·∫øt qu·∫£ t·ª´ng dropdown
    # dropdowns = [
    #     ("Company size", sorted(data['Company size'].dropna().unique(), key=ml.extract_min)),
    #     ("Country", data['Country'].dropna().unique()),
    #     ("Working days", data['Working days'].dropna().unique()),
    #     ("Overtime Policy", data['Overtime Policy'].dropna().unique())
    #     ]
    # # T·∫°o t·ª´ng d√≤ng form c√≥ label + selectbox canh ngang
    # for label, options in dropdowns:
    #     col1, col2 = st.columns([1, 2])
    #     with col1:
    #         st.markdown(f"<p style='margin-top: 0.6rem'>{label}</p>", unsafe_allow_html=True)
    #     with col2:
    #         selected = st.selectbox(label="",
    #                             options=options,
    #                             label_visibility="collapsed")
    #         selections[label] = selected  # G√°n gi√° tr·ªã v√†o dict
    # # D√ôNG CHO C√ÅC SLIDER
    # sliders = [
    #     ("Rating", 1, 5, 4),   # (label, min, max, default)
    #     ("Salary & benefits", 1, 5, 4),
    #     ("Training & learning", 1, 5, 4),
    #     ("Management cares about me", 1, 5, 4),
    #     ("Culture & fun", 1, 5, 4),
    #     ("Office & workspace", 1, 5, 4)
    #     ]

    # slider_results = {}

    # for i, (label, min_val, max_val, default_val) in enumerate(sliders):
    #     col1, col2,col3  = st.columns([1,1,1])
    #     with col1:
    #         st.markdown(f"<p style='margin-top: 0.6rem'>{label}</p>", unsafe_allow_html=True)
    #     with col2:
    #         value = st.slider(
    #             label="",
    #             min_value=min_val,
    #             max_value=max_val,
    #             value=default_val,
    #             key=f"slider_{i}"
    #         )
    #         slider_results[label] = value

    # # S·ª≠ d·ª•ng ƒëi·ªÅu khi·ªÉn submit
    # # st.subheader("Recommender")
    # submitted = st.button("Submit")
    # if submitted:
    #     st.write("B·∫°n ƒë√£ ch·ªçn:")
    #     col1, col2 = st.columns([1,1])
    #     with col1:
    #         for label, value in selections.items():
    #             st.write(f"‚úÖ **{label}**: {value}") 
    #     with col2:
    #         for label, val in slider_results.items():
    #             st.write(f"üîπ {label}: {val}")
        
                
        
    #     # ƒê·ªçc l·∫°i model sau khi ƒë√£ l∆∞u
    #     pkl_filename = "logistic_model.pkl"
    #     with open(pkl_filename, 'rb') as f:
    #         saved = pickle.load(f)

    #     # G·ªçi l·∫°i model ho·∫∑c label_encoders:
    #     loaded_model = saved['model']
    #     loaded_encoders = saved['label_encoders']
            
    #     # T·∫°o DataFrame t·ª´ dict (1 d√≤ng)
    #     input_df = pd.DataFrame([{**selections, **slider_results}])

    #     # st.write("üéØ D·ªØ li·ªáu ƒë·∫ßu v√†o d·∫°ng b·∫£ng:")
    #     # st.dataframe(input_df)
        
    #     saved = pickle.load(open("logistic_model.pkl", "rb"))
    #     model = saved['model']
    #     label_encoders = saved['label_encoders']      
    #     for col in input_df.columns:
    #         key = f'le_{col}'
    #         if key in label_encoders:
    #             input_df[col] = label_encoders[key].transform(input_df[col].astype(str))

    #     # if input_df.select_dtypes(include='object').shape[1] > 0:
    #     #     st.error("‚õî V·∫´n c√≤n c·ªôt ki·ªÉu object ch∆∞a ƒë∆∞·ª£c m√£ h√≥a!")
    #     #     # L·∫•y c√°c c·ªôt c√≥ ki·ªÉu d·ªØ li·ªáu object
    #     #     object_cols = input_df.select_dtypes(include='object').columns.tolist()

    #     #     # Hi·ªÉn th·ªã ra
    #     #     st.warning(f"‚ö†Ô∏è C√≤n c√°c c·ªôt ch∆∞a ƒë∆∞·ª£c m√£ h√≥a: {object_cols}")
    #     # else:
    #         # prediction = model.predict(input_df)
    #         # st.success(f"üîÆ K·∫øt qu·∫£ d·ª± ƒëo√°n: {prediction[0]}")
    #     predit_new = model.predict(input_df)
    #     st.success(f"üîÆ K·∫øt qu·∫£ d·ª± ƒëo√°n: {predit_new[0]}")



